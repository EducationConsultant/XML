package com.banka.services.izvod;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.logging.Logger;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Holder;

import org.apache.commons.lang.time.DateUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.banka.models.domain.Firma;
import com.banka.models.domain.NalogZaPrenosDTO;
import com.banka.models.presek.GetPresekResponse.Stavke;
import com.banka.models.presek.GetPresekResponse.Stavke.Stavka;
import com.banka.models.presek.GetPresekResponse.Zaglavlje;
import com.banka.services.FirmaService;
import com.banka.services.NalogZaPrenosDTOService;

/**
 * This class was generated by Apache CXF 2.6.5
 * 2017-06-18T15:58:18.771+02:00
 * Generated source version: 2.6.5
 * 
 */

@javax.jws.WebService(
                      serviceName = "izvod",
                      portName = "izvodSOAP",
                      targetNamespace = "http://codenotfound.com/services/izvod",
                      //wsdlLocation = "../wsdl/izvod.wsdl",
                      endpointInterface = "com.banka.services.izvod.Izvod")
                      
public class IzvodImpl implements Izvod {
	@Autowired
	NalogZaPrenosDTOService nzp;
	@Autowired
    FirmaService fService;
    private static final Logger LOG = Logger.getLogger(IzvodImpl.class.getName());

    /* (non-Javadoc)
     * @see xml.ftn.Izvod#getPresek(java.lang.String  brojRacuna ,)javax.xml.datatype.XMLGregorianCalendar  datum ,)int  redniBrojPreseka ,)presek.xml.ftn.PresekIzvoda.Zaglavlje  zaglavlje ,)presek.xml.ftn.PresekIzvoda.Stavke  stavke )*
     */
    public void getPresek(String brojRacuna, XMLGregorianCalendar datum,
			int redniBrojPreseka, Holder<Zaglavlje> zaglavlje,
			Holder<Stavke> stavke) {
    	System.out.println(nzp.find().size());
    	float stanje=0;
        for(Firma f:fService.find()){
            if(f.getBrojRacuna().equals(brojRacuna)){
                stanje=f.getUkupanIznos();
                break;
            }
        }
    	
    	ArrayList<NalogZaPrenosDTO> nalozi=new ArrayList<>();
    	for(NalogZaPrenosDTO nal: nzp.find()){
    		if(nal.getRacunDuznika().equals(brojRacuna) || nal.getRacunPoverioca().equals(brojRacuna)){
    			if(DateUtils.isSameDay(datum.toGregorianCalendar().getTime(), nal.getDatumNaloga()))
    				nalozi.add(nal);
    			if(nal.getDatumNaloga().after(datum.toGregorianCalendar().getTime())){
    			    if(nal.getRacunDuznika().equals(brojRacuna))
    			        stanje+=nal.getIznos().floatValue();
    			    else stanje-=nal.getIznos().floatValue();
    			}
    			        
    		}
    	};
    	LOG.info("Executing operation getPresek");
        System.out.println(brojRacuna);
        System.out.println(datum);
        System.out.println(redniBrojPreseka);
        
        //StavkaRepositoryIml repo= new StavkaRepositoryIml();
        try {
        	//brojRacuna;
        	//datum;
        	//redniBrojPreseka;
        	
            
            Zaglavlje zag=new Zaglavlje();
            if(nalozi.size()==0)
            	zag.setBrojPreseka(0);
            else	
            if((nalozi.size()-1) / 5 +1>=redniBrojPreseka)
            	zag.setBrojPreseka(redniBrojPreseka);
            else
                zag.setBrojPreseka((nalozi.size()-1)/5+1);
            
            
            
            Stavke stav= new Stavke();
            

        	int naTeret=0;
            BigDecimal ukNaTeret= new BigDecimal(0);
            int uKorist=0;
            BigDecimal ukUKorist= new BigDecimal(0);
        	//ArrayList<Stavka> a=new ArrayList<>();
            if((nalozi.size()-1) / 5 +1>=redniBrojPreseka)
            for(int i=(redniBrojPreseka-1)*5;i<nalozi.size() && i<redniBrojPreseka*5;i++){
            	NalogZaPrenosDTO s=nalozi.get(i);
            	Stavka stavka= new Stavka();
            	GregorianCalendar c = new GregorianCalendar();
            	c.setTime(s.getDatumNaloga());
            	XMLGregorianCalendar cal=DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            	
            	stavka.setDatumNaloga(cal);
            	

            	c = new GregorianCalendar();
            	c.setTime(s.getDatumValute());
            	cal=DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            	
            	stavka.setDatumValute(cal);
            	stavka.setDuznikNalogodavac(s.getDuznikNalogodavac());
            	stavka.setIznos(s.getIznos());
            	stavka.setModelZaduzenja(s.getModelZaduzenja());
            	stavka.setPozivNaBrojOdobrenja(s.getPozivNaBrojOdobrenja());
            	stavka.setPrimalacPoverilac(s.getPrimalacPoverilac());
            	stavka.setRacunDuznika(s.getRacunDuznika());
            	stavka.setRacunPoverioca(s.getRacunPoverioca());
            	String smer="primljeno";
            	if(s.getRacunDuznika().equals(brojRacuna)){
            		smer="poslato";
            		naTeret++;
            		ukNaTeret=ukNaTeret.add(stavka.getIznos());
            	}else {
            		uKorist++;
            		ukUKorist=ukUKorist.add(stavka.getIznos());
            	}
            	stavka.setSmer(smer);
            	stavka.setSvrhaPlacanja(s.getSvrhaPlacanja());
            	
            	stav.getStavka().add(stavka);
            }
        	stavke.value=stav;
            
			zag.setBrojPromenaNaTeret(naTeret);
			zag.setBrojPromenaUKorist(uKorist);
            zag.setBrojRacuna(brojRacuna);
            zag.setDatumNaloga(datum);
            zag.setNovoStanje(new BigDecimal(stanje));
            zag.setPrethodnoStanje(new BigDecimal(stanje-ukUKorist.floatValue()+ukNaTeret.floatValue()));
			zag.setUkupnoNaTeret(ukNaTeret);
			zag.setUkupnoUKorist(ukUKorist);
        	
            zaglavlje.value=zag;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

	

}